<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>django模型设计</title>
      <link href="/2018/12/29/django-de-mo-xing-she-ji/"/>
      <url>/2018/12/29/django-de-mo-xing-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="django中的模型设计"><a href="#django中的模型设计" class="headerlink" title="django中的模型设计"></a>django中的模型设计</h1><p>   django中的模型设计与数据库类型有关，这里主要讲述关系型数据库，以MySQL下的学生表、班级表、课程表、学生拓展表为例<br>   多个表的对象之间主要有三种关系：一对一、一对多、多对多</p><h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><ul><li><p>定义一对一的关联关系：<br>  <code>models.OneToOneField(Student, on_delete=models.CASCADE, related_name=&#39;info&#39;)</code><br> 关键属性解析：<br> ​    Student:<br> ​        需要关联的对象模型<br> ​    on_delete:<br> ​        删除主表对从表的影响<br> ​        on_delete=models.CASCADE —– 删除主表，从表也会被删除<br> ​        on_delete=models.PROTECT —– 删除主表，从表不会被删除<br> ​        on_delete=models.SET_NULL —– 删除主表，从表的关联字段设置为空（注意：这里要设置null=True,允许为空才可以）<br> ​    related_name:<br> ​        给模型表添加别名，当需要用到模型表的名称时，就可以使用别名<br> ​        如果不设置此属性，当需要用到模型表的名称时，就需要使用声明时模型名的小写</p></li><li><p>存储<br>  方法一：<br>  ​    <code>stu_info.stu = Student.objects.get(id=1)</code><br>  方法二：<br>  ​    <code>stu_info.stu_id = 1</code>    （stu_id是数据库根据学生表的主键重新命名的外键）</p></li><li><p>查询<br>  学生表对象查询拓展表对象：</p><pre><code>      stu = Student.objects.filter(s_name=&#39;小明&#39;).first()      stu_info = stu.studentinfo         # 反向查询。关联模型对象，关联另外一个模型名称的小写      phone = stu_info.phone</code></pre><p>​    拓展表对象查询学生表对象：</p><pre><code>      stu_info = StudentInfo.objects.filter(s_no=&#39;123456&#39;).first()      stu1 = stu_info.stu      print(stu1.s_name)</code></pre></li></ul><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><ul><li><p>定义一对多的关联关系：<br>  <code>g = models.ForeignKey(Grade, null=True, on_delete=models.CASCADE)</code>—— 只能在多的一边加入外键属性<br>  关键属性同上</p></li><li><p>存储：<br>  方法一：<br>  ​    <code>stu.g = Student.objects.get(id=1)</code><br>  方法二：<br>  ​    <code>stu.g_id = 1</code> ———-（g_id是数据库在学生表中重新命名的外键）</p></li><li><p>查询：<br>  学生查询班级：</p><pre><code>      stu = Student.objects.filter(s_name=&#39;小花&#39;).first()      grade = stu.g</code></pre><p>​    班级查询学生：</p><pre><code>      grade = Grade.objects.filter(g_name=&#39;python1808&#39;).first()      stus = grade.student_set.all()     # 反向查询结果有多个的时候添加_set,再添加筛选条件</code></pre></li></ul><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><ul><li><p>定义多对多的关联关系：<br>  ​    <code>stu = models.ManyToManyField(Student, null=True)</code> —— 定义了以后会自动生成一张中间表</p></li><li><p>存储：<br>  和一对多的存储方式相同</p></li><li><p>查询：<br>  课程查询学生：<br>  ​    <code>cou.stu.filter(s_name=&#39;小明&#39;)</code><br>  学生查询课程：<br>  ​    <code>stu.course_set.filter(c_name=&#39;大学英语&#39;)</code></p></li><li><p>对中间表信息进行操作：<br>  先将学生和课程的对象拿到：</p><pre><code>      cou = Course.objects.filter(c_name=&#39;大学英语&#39;).first()      stu = Student.objects.filter(s_name=&#39;雷力茏&#39;).first()</code></pre><p>​    将课程添加给学生：<br>​        <code>stu.course_set.add(cou)</code><br>​    给学生选上课程：<br>​        <code>cou.stu.add(stu)</code><br>​    删除中间表信息：<br>​        <code>stu.course_set.remove(cou)</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> django模型设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django的ORM技术</title>
      <link href="/2018/12/28/django-de-orm-ji-zhu/"/>
      <url>/2018/12/28/django-de-orm-ji-zhu/</url>
      
        <content type="html"><![CDATA[<h2 id="ORM技术"><a href="#ORM技术" class="headerlink" title="ORM技术"></a>ORM技术</h2><ul><li>对象关系映射：将模型中的语句映射为数据库中的语句，可以通过编写模型中的语句对数据库(多种)进行操作</li></ul><h2 id="通过模型对数据库进行增删查改"><a href="#通过模型对数据库进行增删查改" class="headerlink" title="通过模型对数据库进行增删查改"></a>通过模型对数据库进行增删查改</h2><ul><li>我们这里以一个存有学生表的数据库为例，该学生表的内容如下:<br><img src="/images/Djangotest1.png" alt="djangotest1"></li></ul><h3 id="创建-插入"><a href="#创建-插入" class="headerlink" title="创建/插入"></a>创建/插入</h3><ul><li><p>方法一：<br>  Student.objects.create(字段1=值1, 字段2=值2)<br>  ​            <code>Student.objects.create(s_name=&#39;小黄&#39;)</code></p></li><li><p>方法二：<br>模型对象.save()</p><pre><code>  stu = Student()  stu.s_name = &#39;胡一菲&#39;  stu.s_gender = 0  stu.s_age = 26  stu.save()</code></pre></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>Student.objects.filter(条件).delete()<br>  ​            <code>Student.objects.filter(id=3).delete()</code></li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li><p>方式一：<br>  Student.objects.filter(条件).update(字段1=值1, 字段2=值2)<br>  ​        <code>Student.objects.filter(id=4).update(s_name=&#39;妲己&#39;)</code></p></li><li><p>方式二：</p><pre><code>  Student.save()  stu = Student.objects.filter(id=2).first()  stu.s_gender = 0  stu.save()</code></pre></li><li><p><strong><em>注意：</em></strong>方式一不会更新auto_now字段，方式二会更新auto_now字段，所以通常情况下使用方式二</p></li></ul><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询的内容较为复杂，以下为整理过后的主要内容：</p><ul><li>Student.objects.all() —— 查询所有学生</li><li>Student.objects.filter(条件).first() —— 查询满足条件的对象（查询结果是一个列表，第一个元素才是学生对象）</li><li>Student.objects.get(条件) ——— 查询出满足条件的对象（条件必须是唯一性约束，并且是有效条件）</li><li>Student.objects.exclude(条件) ———- 查询出不满足括号内条件的信息</li><li>Student.objects.order_by(id) ———- 按id值升序排列</li><li>Student.objects.order_by(-id) ———- 按id值降序排列</li><li>Student.objects.all().values(字段1) ——– 查询指定字段（不加字段就查询所有的字段）</li><li>Student.objects.filter(s_name=’小张’).exists() ——— 判断指定字段是否存在</li><li>Student.objects.filter(s_gender=1).count() ———— 查询指定条件的对象的个数<h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4></li><li>Student.objects.filter(s_name__contains=’胡’) ———- 将姓名中包含‘胡’字段的对象查询出来</li><li>Student.objects.filter(s_name__startswith=’雷’) ——– 查询姓名以‘雷’开始的对象</li><li>Student.objects.filter(s_name__endswith=’霞’) ———- 查询姓名以‘霞’结尾的对象</li><li>Student.objects.filter(id__in=[1, 2, 3, 4, 5, 6, 7]) ——- 查询id在指定列表中的对象</li><li>Student.objects.filter(pk__in=[1, 2, 3, 4, 5, 6, 7]) ——- ‘pk’指的是primary key,查询结果和使用id的查询结果相同</li></ul><h4 id="gte-lte-大于等于-小于等于-–-greater-littler-than-equal"><a href="#gte-lte-大于等于-小于等于-–-greater-littler-than-equal" class="headerlink" title="gte/lte:大于等于/小于等于 – greater/littler than equal"></a>gte/lte:大于等于/小于等于 – greater/littler than equal</h4><h4 id="gt-lt-大于-小于-–-greater-littler-than"><a href="#gt-lt-大于-小于-–-greater-littler-than" class="headerlink" title="gt/lt:大于/小于 – greater/littler than"></a>gt/lt:大于/小于 – greater/littler than</h4><ul><li>Student.objects.filter(s_age__gte=22, s_age__lte=24) ——– 查询年龄在22到24之间的对象</li></ul><h4 id="聚合函数-aggregate-—-聚合"><a href="#聚合函数-aggregate-—-聚合" class="headerlink" title="聚合函数:aggregate() — 聚合"></a>聚合函数:aggregate() — 聚合</h4><ul><li>导入模块：from django.db.models import Avg, Sum, Count, Max, Min</li><li>Student.objects.all().aggregate(Avg(‘s_age’)) —— 查询所有学生的平均年龄</li><li>Student.objects.all().aggregate(Sum(‘s_age’)) —— 查询所有学生的年龄的和<h4 id="用Q-封装比较运算符"><a href="#用Q-封装比较运算符" class="headerlink" title="用Q()封装比较运算符"></a>用Q()封装比较运算符</h4></li><li>stus = Student.objects.filter(Q(s_age__gte=20) or Q(s_age__lte=22)) — 或运算</li><li>stus = Student.objects.filter(Q(s_age__gte=20) | Q(s_age__lte=22)) — 或运算</li><li>stus = Student.objects.filter(Q(s_age__gte=20) and Q(s_age__lte=22)) — 与运算</li><li>stus = Student.objects.filter(Q(s_age__gte=20) &amp; Q(s_age__lte=22)) — 与运算</li><li>stus = Student.objects.filter(Q(s_age__gte=20), Q(s_age__lte=22)) — 与运算</li><li>stus = Student.objects.filter(~Q(s_age__gte=21)) — 非运算<h4 id="F-可用于比较两个字段（支持加减运算）"><a href="#F-可用于比较两个字段（支持加减运算）" class="headerlink" title="F()可用于比较两个字段（支持加减运算）"></a>F()可用于比较两个字段（支持加减运算）</h4></li><li>Student.objects.filter(physical__gt=F(‘math’)) ——- 查询物理成绩大于数学成绩的学生对象</li><li>Student.objects.filter(physical__gt=F(‘math’) + 10) —– 查询物理成绩比数学成绩多十分以上的学生对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> django的模型语句 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx服务器安装</title>
      <link href="/2018/12/26/nginx-fu-wu-qi-an-zhuang/"/>
      <url>/2018/12/26/nginx-fu-wu-qi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx服务器"><a href="#Nginx服务器" class="headerlink" title="Nginx服务器"></a>Nginx服务器</h1><h3 id="1-阿里云添加80端口"><a href="#1-阿里云添加80端口" class="headerlink" title="1.阿里云添加80端口"></a>1.阿里云添加80端口</h3><p>阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口</p><p><img src="/images/aliyun0.png" alt="打开安全组设置"><br><img src="/images/aliyun2.png" alt=""><br><img src="/images/aliyun3.png" alt=""><br><img src="/images/aliyun4.png" alt=""></p><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><p>a) 添加nginx存储库  </p><pre class=" language-python"><code class="language-python">    yum install epel<span class="token operator">-</span>release</code></pre><p>b) 安装nginx</p><pre class=" language-python"><code class="language-python">    yum install nginx</code></pre><p>c) 运行nginx<br>Nginx不会自行启动。要运行Nginx  </p><pre><code>    systemctl start nginx</code></pre><p>nginx的运行命令:  </p><pre><code>    systemctl status nginx 查看nginx的状态      systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动  </code></pre><p>d) 系统启动时启动Nginx  </p><pre><code>    systemctl enable nginx</code></pre><p>e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：   </p><pre><code>    sudo firewall-cmd --permanent --zone=public --add-service=http     sudo firewall-cmd --permanent --zone=public --add-service=https    sudo firewall-cmd --reload</code></pre><h3 id="3-nginx目录共享配置"><a href="#3-nginx目录共享配置" class="headerlink" title="3.nginx目录共享配置"></a>3.nginx目录共享配置</h3><p>a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/LLL<br>b) 打开 etc/nginx/nginx.conf 文件，设置server</p><pre><code>    #共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表    root /home/LLL;    location / {           autoindex on;           autoindex_exact_size on;           autoindex_localtime on;    }  </code></pre><p>除了可以共享文件，还可以自定义页面</p><pre><code>    #自定义服务器页面    location / {            root /home/LLL;            index index.html index.htm;    }</code></pre><p>注意： 如果出现权限问题，可以修改目录的权限  </p><h1 id="ssh密钥认证"><a href="#ssh密钥认证" class="headerlink" title="ssh密钥认证"></a>ssh密钥认证</h1><p>1.在主机和从机上执行：<code>ssh-keygen</code></p><p>2.在从机上执行:  <code>scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub</code><br>(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)</p><p>3.在主机中的.ssh文件夹中创建authorized_keys文件： <code>touch authorized_keys</code> </p><p>4.修改文件authorized_keys的权限: <code>chmod 600  authorized_keys</code>  </p><p>5.将master.pub放进authorized_keys文件中:  <code>cat master.pub &gt;&gt;  authorized_keys</code></p><p>6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中</p>]]></content>
      
      
      <categories>
          
          <category> Nginx安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本操作</title>
      <link href="/2018/12/25/git-chang-yong-zhi-ling/"/>
      <url>/2018/12/25/git-chang-yong-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h1><h2 id="1-基本指令"><a href="#1-基本指令" class="headerlink" title="1.基本指令"></a>1.基本指令</h2><p><code>git init</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  新建git本地仓库<br><code>git add 文件/文件夹</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  将文件添加到缓存区中<br><code>git add -A</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; — 添加所有内容到缓存区中<br><code>git status</code> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;———    查看git状态<br><code>git commit -m  ‘提交信息’</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  将缓存区中的全部内容提交到git本地仓库中  </p><p><code>git log</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——-    查看提交日志  </p><p><code>git reset  - - hard   HEAD</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——   让工作目录中的内容和仓库中的内容保持一致<br><code>git reset  --hard HEAD^</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到上一个版本<br><code>git  reset  - - hard 版本号</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到指定的版本<br><code>git checkout  - -  文件名</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态)  </p><p><code>git clone &lt;url&gt;</code> - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥)  </p><p><code>git remote add origin 地址</code>      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 关联远程仓库(只需要关联一次)</p><p><code>git push [-u] origin master</code>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—– 提交(-u在第一次提交分之的时候才用)  </p><h2 id="2-分之管理"><a href="#2-分之管理" class="headerlink" title="2.分之管理"></a>2.分之管理</h2><p>创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发  </p><p>常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发)  </p><p><code>git branch [-a]</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        - 查看分之<br><code>git branch 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之<br><code>git checkout   分支名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-   切换分之<br><code>git checkout -b 分之名</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    - 切换并创建新的分之<br><code>git diff    分之1  分之2</code>        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异<br><code>git merge 分之名</code>            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并     </p><p>注意: 切换分之、push、pull，这些操作前要保证工作区是clean  </p><p>避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)</p>]]></content>
      
      
      <categories>
          
          <category> git的使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux指令</title>
      <link href="/2018/12/24/wan-zhuan-linux-cao-zuo-xi-tong/"/>
      <url>/2018/12/24/wan-zhuan-linux-cao-zuo-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="玩转Linux操作系统"><a href="#玩转Linux操作系统" class="headerlink" title="玩转Linux操作系统"></a>玩转Linux操作系统</h2><h3 id="操作系统发展史"><a href="#操作系统发展史" class="headerlink" title="操作系统发展史"></a>操作系统发展史</h3><p>只有硬件没有软件的计算机系统被称之为“裸机”，我们很难用“裸机”来完成计算机日常的工作（如存储和运算），所以必须用特定的软件来控制硬件的工作。最靠近计算机硬件的软件是系统软件，其中最为重要的就是“操作系统”。“操作系统”是控制和管理整个计算机系统的硬件和软件资源，合理的分配资源和调配任务，为系统用户和其他软件提供接口和环境的程序的集合。</p><h4 id="没有操作系统（手工操作）"><a href="#没有操作系统（手工操作）" class="headerlink" title="没有操作系统（手工操作）"></a>没有操作系统（手工操作）</h4><p>在计算机诞生之初没有操作系统的年代，人们先把程序纸带（或卡片）装上计算机，然后启动输入机把程序和送入计算机，接着通过控制台开关启动程序运行。当程序执行完毕，打印机输出计算的结果，用户卸下并取走纸带（或卡片）。第二个用户上机，重复同样的步骤。在整个过程中用户独占机器，CPU等待手工操作，资源利用率极低。下图是IBM生产的书写Fortran程序的80栏打孔卡，当然这个已经是比较先进的打孔卡了。</p><p><img src="./res/ibm-col80-punched-card.png" alt=""></p><h4 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h4><p>首先启动计算机上的一个监督程序，在监督程序的控制下，计算机能够自动的、成批的处理一个或多个用户的作业。完成一批作业后，监督程度又从输入机读取作业存入磁带机。按照上面的步骤重复处理任务。监督程序不停的处理各个作业，实现了作业的自动转接，减少了作业的建立时间和手工操作时间，提高了计算机资源的利用率。 批处理系统又可以分为单道批处理系统、多道批处理系统、联机批处理系统、脱机批处理系统。</p><h4 id="分时系统和实时系统"><a href="#分时系统和实时系统" class="headerlink" title="分时系统和实时系统"></a>分时系统和实时系统</h4><p>分时系统是把处理器的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。 若某个作业在分配给它的时间片内不能完成其计算，则该作业暂时中断，把处理机让给另一作业使用，等待下一轮调度时再继续其运行。由于计算机速度很快，作业运行轮转得很快，给每个用户的感觉是他独占了一台计算机。而每个用户可以通过自己的终端向系统发出各种操作控制命令，在充分的人机交互情况下，完成作业的运行。为了解决分时系统不能及时响应用户指令的情况，又出现了能够在在严格的时间范围内完成事件处理，及时响应随机外部事件的实时系统。</p><h4 id="通用操作系统"><a href="#通用操作系统" class="headerlink" title="通用操作系统"></a>通用操作系统</h4><ol><li><p>1960s：IBM的System/360系列的机器有了统一的操作系统OS/360。</p></li><li><p>1965年：AT&amp;T的贝尔实验室加入GE和MIT的合作计划开始开发MULTICS。</p></li><li><p>1969年：Ken Tompson为了玩“Space Travel”游戏用汇编语言在PDP-7上开发了Unics。</p><p><img src="./res/pdp-7.png" alt=""></p></li><li><p>1970年~1971年：Ken Tompson和Dennis Ritchie用B语言在PDP-11上重写了Unics，并在Brian Kernighan的建议下将其更名为Unix。</p><p><img src="./res/ken-and-dennis-pdp-11.png" alt=""></p></li><li><p>1972年~1973年：Dennis Ritchie发明了C语言来取代可移植性较差的B语言，并开启了用C语言重写Unix的工作。</p></li><li><p>1974年：Unix推出了里程碑意义的第5版，几乎完全用C语言来实现。</p></li><li><p>1979年：从Unix第7版开始，AT&amp;T发布新的使用条款，将Unix私有化。</p></li><li><p>1987年：Andrew S. Tanenbaum教授为了能在课堂上教授学生操作系统运作的细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统，以避免版权上的争议并将其命名为Minix。</p></li><li><p>1991年：Linus Torvalds就读于芬兰赫尔辛基大学期间，尝试在Minix上做一些开发工作，但因为Minix只是作为教学用途的功能并不强，为了方便在学校的主机的新闻组和邮件系统中读写和下载文件，Linus编写了磁盘驱动程序和文件系统，这些成为了Linux系统内核的雏形。</p><p><img src="./res/Ken-Thompson.png" alt="">Ken L. Thompson (ken)</p><p><img src="./res/dennis-ritchie.png" alt="">Dennis M. Ritchie (DMR)</p><p><img src="./res/andrew-tanenbaum.png" alt="">Andrew S. Tanenbaum (ast)</p><p><img src="./res/linus-torvalds.png" alt="">Linus B. Torvalds</p></li></ol><p>下图是Unix操作系统家族的图谱。</p><p><img src="./res/history-of-unix.png" alt=""></p><h3 id="Linux概述"><a href="#Linux概述" class="headerlink" title="Linux概述"></a>Linux概述</h3><p>Linux是一个通用操作系统。一个操作系统要负责任务调度、内存分配、处理外围设备I/O等操作。操作系统通常由内核（运行其他程序，管理像磁盘、打印机等硬件设备的核心程序）和系统程序（设备驱动、底层库、shell、服务程序等）两部分组成。</p><p>Linux内核是芬兰人Linus Torvalds开发的，于1991年9月发布。而Linux操作系统作为Internet时代的产物，它是由全世界许多开发者共同合作开发的，是一个自由的操作系统（注意自由和免费并不是同一个概念，想了解二者的差别可以<a href="https://www.debian.org/intro/free" target="_blank" rel="noopener">点击这里</a>）。</p><h3 id="Linux系统优点"><a href="#Linux系统优点" class="headerlink" title="Linux系统优点"></a>Linux系统优点</h3><ol><li>通用操作系统，不跟特定的硬件绑定。</li><li>用C语言编写，有可移植性，有内核编程接口。</li><li>支持多用户和多任务，支持安全的分层文件系统。</li><li>大量的实用程序，完善的网络功能以及强大的支持文档。</li><li>可靠的安全性和良好的稳定性，对开发者更友好。</li></ol><h3 id="Linux系统发行版本"><a href="#Linux系统发行版本" class="headerlink" title="Linux系统发行版本"></a>Linux系统发行版本</h3><ol><li><a href="https://www.redhat.com/en" target="_blank" rel="noopener">Redhat</a></li><li><a href="https://www.ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a></li><li><a href="https://www.centos.org/" target="_blank" rel="noopener">CentOS</a></li><li><a href="https://getfedora.org/" target="_blank" rel="noopener">Fedora</a></li><li><a href="https://www.debian.org/" target="_blank" rel="noopener">Debian</a></li><li><a href="https://www.opensuse.org/" target="_blank" rel="noopener">openSUSE</a></li></ol><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><p>Linux系统的命令通常都是如下所示的格式：</p><pre class=" language-Shell"><code class="language-Shell">命令名称 [命名参数] [命令对象]</code></pre><ol><li><p>获取登录信息 - <strong>w</strong> / <strong>who</strong> / <strong>last</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# w 23:31:16 up 12:16,  2 users,  load average: 0.00, 0.01, 0.05USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATroot     pts/0    182.139.66.250   23:03    4.00s  0.02s  0.00s wjackfrue pts/1    182.139.66.250   23:26    3:56   0.00s  0.00s -bash[root@izwz97tbgo9lkabnat2lo8z ~]# whoroot     pts/0        2018-04-12 23:03 (182.139.66.250)jackfrued pts/1        2018-04-12 23:26 (182.139.66.250)[root@izwz97tbgo9lkabnat2lo8z ~]# who am iroot     pts/0        2018-04-12 23:03 (182.139.66.250)</code></pre></li><li><p>查看自己使用的Shell - <strong>ps</strong>。</p><p>Shell也被称为“壳”，它是用户与内核交流的翻译官，简单的说就是人与计算机交互的接口。目前很多Linux系统默认的Shell都是bash（<u>B</u>ourne <u>A</u>gain <u>SH</u>ell），因为它可以使用Tab键进行命令补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作等。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# ps  PID TTY          TIME CMD 3531 pts/0    00:00:00 bash 3553 pts/0    00:00:00 ps</code></pre></li><li><p>查看命令的说明 - <strong>whatis</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# whatis psps (1)        - report a snapshot of the current processes.[root@izwz97tbgo9lkabnat2lo8z ~]# whatis pythonpython (1)    - an interpreted, interactive, object-oriented programming language</code></pre></li><li><p>查看命令的位置 - <strong>which</strong> / <strong>whereis</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# whereis psps: /usr/bin/ps /usr/share/man/man1/ps.1.gz[root@izwz97tbgo9lkabnat2lo8z ~]# whereis pythonpython: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz[root@izwz97tbgo9lkabnat2lo8z ~]# which ps/usr/bin/ps[root@izwz97tbgo9lkabnat2lo8z ~]# which python/usr/bin/python</code></pre></li><li><p>查看帮助文档 - <strong>man</strong> / <strong>info</strong> / <strong>apropos</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# ps --helpUsage: ps [options] Try 'ps --help <simple|list|output|threads|misc|all>'  or 'ps --help <s|l|o|t|m|a>' for additional help text.For more details see ps(1).[root@izwz97tbgo9lkabnat2lo8z ~]# man psPS(1)                                User Commands                                PS(1)NAME       ps - report a snapshot of the current processes.SYNOPSIS       ps [options]DESCRIPTION...[root@izwz97tbgo9lkabnat2lo8z ~]# info ps...</code></pre></li><li><p>切换用户 - <strong>su</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# su hellokitty[hellokitty@izwz97tbgo9lkabnat2lo8z root]$</code></pre></li><li><p>以管理员身份执行命令 - <strong>sudo</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[jackfrued@izwz97tbgo9lkabnat2lo8z ~]$ ls /rootls: cannot open directory /root: Permission denied[jackfrued@izwz97tbgo9lkabnat2lo8z ~]$ sudo ls /root[sudo] password for jackfrued:calendar.py  code  error.txt  hehe  hello.c  index.html  myconf  result.txt</code></pre><blockquote><p><strong>说明</strong>：如果希望用户能够以管理员身份执行命令，用户必须被添加到sudoers名单中，该文件在 <code>/etc</code>目录下。</p></blockquote></li><li><p>登入登出相关 - <strong>logout</strong> / <strong>exit</strong> / <strong>adduser</strong> / <strong>userdel</strong> / <strong>passwd</strong> / <strong>ssh</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# adduser hellokitty[root@izwz97tbgo9lkabnat2lo8z ~]# passwd hellokittyChanging password for user jackfrued.New password:Retype new password:passwd: all authentication tokens updated successfully.[root@izwz97tbgo9lkabnat2lo8z ~]# ssh hellokitty@1.2.3.4hellokitty@1.2.3.4's password:Last login: Thu Apr 12 23:05:32 2018 from 10.12.14.16[hellokitty@izwz97tbgo9lkabnat2lo8z ~]$ logoutConnection to 1.2.3.4 closed.[root@izwz97tbgo9lkabnat2lo8z ~]#</code></pre></li><li><p>查看系统和主机名 - <strong>uname</strong> / <strong>hostname</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# unameLinux[root@izwz97tbgo9lkabnat2lo8z ~]# hostnameizwz97tbgo9lkabnat2lo8z[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-releaseCentOS Linux release 7.4.1708 (Core) </code></pre></li><li><p>重启和关机 - <strong>reboot</strong> / <strong>init 6</strong> / <strong>shutdown</strong> / <strong>init 0</strong>。</p></li><li><p>查看历史命令 - <strong>history</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# history...452  ls453  cd Python-3.6.5/454  clear455  history[root@iZwz97tbgo9lkabnat2lo8Z ~]# !454</code></pre><blockquote><p>说明：查看到历史命令之后，可以用<code>!历史命令编号</code>来重新执行该命令；通过<code>history -c</code>可以清除历史命令。</p></blockquote></li></ol><h3 id="实用程序"><a href="#实用程序" class="headerlink" title="实用程序"></a>实用程序</h3><h4 id="文件和文件夹操作"><a href="#文件和文件夹操作" class="headerlink" title="文件和文件夹操作"></a>文件和文件夹操作</h4><ol><li><p>创建/删除目录 - <strong>mkdir</strong> / <strong>rmdir</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# mkdir abc[root@iZwz97tbgo9lkabnat2lo8Z ~]# mkdir -p xyz/abc[root@iZwz97tbgo9lkabnat2lo8Z ~]# rmdir abc</code></pre></li><li><p>创建/删除文件 - <strong>touch</strong> / <strong>rm</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# touch readme.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# touch error.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# rm error.txtrm: remove regular empty file ‘error.txt’? y[root@iZwz97tbgo9lkabnat2lo8Z ~]# rm -rf xyz</code></pre><ul><li>touch命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间：<ul><li>更改内容的时间 - mtime。</li><li>更改权限的时间 - ctime。</li><li>最后访问时间 - atime。</li></ul></li><li>rm的几个重要参数：<ul><li>-i：交互式删除，每个删除项都会进行询问。</li><li>-r：删除目录并递归的删除目录中的文件和目录。</li><li>-f：强制删除，忽略不存在的文件，没有任何提示。</li></ul></li></ul></li><li><p>切换和查看当前工作目录 - <strong>cd</strong> / <strong>pwd</strong>。</p><blockquote><p>说明：<code>cd</code>命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以<code>/</code>开头）来切换到指定的目录，也可以用<code>cd ..</code>来返回上一级目录。</p></blockquote></li><li><p>查看目录内容 - <strong>ls</strong>。</p><ul><li>-l：以长格式查看文件和目录。</li><li>-a：显示以点开头的文件和目录（隐藏文件）。</li><li>-R：遇到目录要进行递归展开（继续列出目录下面的文件和目录）。</li><li>-d：只列出目录，不列出其他内容。</li><li>-S/-t：按大小/时间排序。</li></ul></li><li><p>查看文件内容 - <strong>cat</strong> / <strong>head</strong> / <strong>tail</strong> / <strong>more</strong> / <strong>less</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://www.sohu.com/ -O sohu.html--2018-06-20 18:42:34--  http://www.sohu.com/Resolving www.sohu.com (www.sohu.com)... 14.18.240.6Connecting to www.sohu.com (www.sohu.com)|14.18.240.6|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 212527 (208K) [text/html]Saving to: ‘sohu.html’100%[==================================================>] 212,527     --.-K/s   in 0.03s2018-06-20 18:42:34 (7.48 MB/s) - ‘sohu.html’ saved [212527/212527][root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sohu.html...[root@iZwz97tbgo9lkabnat2lo8Z ~]# head -10 sohu.html<!DOCTYPE html><html><head><title>搜狐</title><meta name="Keywords" content="搜狐,门户网站,新媒体,网络媒体,新闻,财经,体育,娱乐,时尚,汽车,房产,科技,图片,论坛,微博,博客,视频,电影,电视剧"/><meta name="Description" content="搜狐网为用户提供24小时不间断的最新资讯，及搜索、邮件等网络服务。内容包括全球热点事件、突发新闻、时事评论、热播影视剧、体育赛事、行业动态、生活服务信息，以及论坛、博客、微博、我的搜狐等互动空间。" /><meta name="shenma-site-verification" content="1237e4d02a3d8d73e96cbd97b699e9c3_1504254750"><meta charset="utf-8"/><meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"/>[root@iZwz97tbgo9lkabnat2lo8Z ~]# tail -2 sohu.html</body></html>[root@iZwz97tbgo9lkabnat2lo8Z ~]# less sohu.html...[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat -n sohu.html | more...</code></pre></li><li><p>拷贝/移动文件 - <strong>cp</strong> / <strong>mv</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# mkdir backup[root@iZwz97tbgo9lkabnat2lo8Z ~]# cp sohu.html backup/[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd backup[root@iZwz97tbgo9lkabnat2lo8Z backup]# lssohu.html[root@iZwz97tbgo9lkabnat2lo8Z backup]# mv sohu.html sohu_index.html[root@iZwz97tbgo9lkabnat2lo8Z backup]# lssohu_index.html</code></pre></li><li><p>查找文件和查找内容 - <strong>find</strong> / <strong>grep</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find / -name "*.html"/root/sohu.html/root/backup/sohu_index.html[root@izwz97tbgo9lkabnat2lo8z ~]# find . -atime 7 -type f -print[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -size +2k[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -name "*.swp" -delete[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep "<script>" sohu.html -n20:<script>[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep -E \<\/?script.*\> sohu.html -n20:<script>22:</script>24:<script src="//statics.itc.cn/web/v3/static/js/es5-shim-08e41cfc3e.min.js"></script>25:<script src="//statics.itc.cn/web/v3/static/js/es5-sham-1d5fa1124b.min.js"></script>26:<script src="//statics.itc.cn/web/v3/static/js/html5shiv-21fc8c2ba6.js"></script>29:<script type="text/javascript">52:</script>...</code></pre><blockquote><p>说明：<code>grep</code>在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用<code>grep -E</code>或者直接使用<code>egrep</code>。</p></blockquote></li><li><p>链接 - <strong>ln</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 1 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 2 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup2[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 3 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /etc/centos-release sysinfo[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sysinfolrwxrwxrwx 1 root root 19 Jun 20 19:21 sysinfo -> /etc/centos-release[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sysinfoCentOS Linux release 7.4.1708 (Core)[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-releaseCentOS Linux release 7.4.1708 (Core)</code></pre><blockquote><p>说明：链接可以分为硬链接和软链接（符号链接）。硬链接可以认为是一个指向文件数据的指针，就像Python中对象的引用计数，每添加一个硬链接，文件的对应链接数就增加1，只有当文件的链接数为0时，文件所对应的存储空间才有可能被其他文件覆盖。我们平常删除文件时其实并没有删除硬盘上的数据，我们删除的只是一个指针，或者说是数据的一条使用记录，所以类似于“文件粉碎机”之类的软件在“粉碎”文件时除了删除文件指针，还会在文件对应的存储区域填入数据来保证文件无法再恢复。软链接类似于Windows系统下的快捷方式，当软链接链接的文件被删除时，软链接也就失效了。</p></blockquote></li><li><p>压缩/解压缩和归档/解归档 - <strong>gzip</strong> / <strong>gunzip</strong> / <strong>xz</strong> / <strong>tar</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-4.0.10.tar.gz--2018-06-20 19:29:59--  http://download.redis.io/releases/redis-4.0.10.tar.gzResolving download.redis.io (download.redis.io)... 109.74.203.151Connecting to download.redis.io (download.redis.io)|109.74.203.151|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 1738465 (1.7M) [application/x-gzip]Saving to: ‘redis-4.0.10.tar.gz’100%[==================================================>] 1,738,465   70.1KB/s   in 74s2018-06-20 19:31:14 (22.9 KB/s) - ‘redis-4.0.10.tar.gz’ saved [1738465/1738465][root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-4.0.10.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tar[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-4.0.10.tarredis-4.0.10/redis-4.0.10/.gitignoreredis-4.0.10/00-RELEASENOTESredis-4.0.10/BUGSredis-4.0.10/CONTRIBUTINGredis-4.0.10/COPYINGredis-4.0.10/INSTALLredis-4.0.10/MANIFESTOredis-4.0.10/Makefileredis-4.0.10/README.mdredis-4.0.10/deps/redis-4.0.10/deps/Makefileredis-4.0.10/deps/README.md...[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*redis-4.0.10.tarredis-4.0.10:00-RELEASENOTES  COPYING  Makefile   redis.conf       runtest-sentinel  testsBUGS             deps     MANIFESTO  runtest          sentinel.conf     utilsCONTRIBUTING     INSTALL  README.md  runtest-cluster  src</code></pre></li><li><p>其他工具 - <strong>sort</strong> / <strong>uniq</strong> / <strong>diff</strong> / <strong>tr</strong> / <strong>cut</strong> / <strong>paste</strong> / <strong>file</strong> / <strong>wc</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat foo.txtgrapeapplepitaya[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat bar.txt100200300400[root@iZwz97tbgo9lkabnat2lo8Z ~]# paste foo.txt bar.txtgrape   100apple   200pitaya  300      400[root@iZwz97tbgo9lkabnat2lo8Z ~]# paste foo.txt bar.txt > hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# cut -b 4-8 hello.txtpe      10le      20aya     30[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat hello.txt | tr '\t' ','grape,100apple,200pitaya,300,400[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget https://www.baidu.com/img/bd_logo1.png--2018-06-20 18:46:53--  https://www.baidu.com/img/bd_logo1.pngResolving www.baidu.com (www.baidu.com)... 220.181.111.188, 220.181.112.244Connecting to www.baidu.com (www.baidu.com)|220.181.111.188|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 7877 (7.7K) [image/png]Saving to: ‘bd_logo1.png’100%[==================================================>] 7,877       --.-K/s   in 0s2018-06-20 18:46:53 (118 MB/s) - ‘bd_logo1.png’ saved [7877/7877][root@iZwz97tbgo9lkabnat2lo8Z ~]# file bd_logo1.pngbd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced[root@iZwz97tbgo9lkabnat2lo8Z ~]# wc sohu.html2979   6355 212527 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# wc -l sohu.html2979 sohu.html</code></pre></li></ol><h4 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h4><ol><li><p>管道的使用 - <strong>|</strong>。</p><p>例子：查找当前目录下文件个数。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find ./ | wc -l6152</code></pre><p>例子：列出当前路径下的文件和文件夹，给每一项加一个编号。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls | cat -n     1  dump.rdb     2  mongodb-3.6.5     3  Python-3.6.5     4  redis-3.2.11     5  redis.conf</code></pre><p>例子：查找record.log中包含AAA，但不包含BBB的记录的总数</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat record.log | grep AAA | grep -v BBB | wc -l</code></pre></li><li><p>输出重定向和错误重定向 - <strong>></strong> / <strong>&gt;&gt;</strong> / <strong>2></strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat readme.txtbananaapplegrapeapplegrapewatermelonpearpitaya[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat readme.txt | sort | uniq > result.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat result.txtapplebananagrapepearpitayawatermelon</code></pre></li><li><p>输入重定向 - <strong>\&lt;</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# echo 'hello, world!' > hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# wall < hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]#Broadcast message from root@iZwz97tbgo9lkabnat2lo8Z (Wed Jun 20 19:43:05 2018):hello, world![root@iZwz97tbgo9lkabnat2lo8Z ~]# echo 'I will show you some code.' >> hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]# wall < hello.txt[root@iZwz97tbgo9lkabnat2lo8Z ~]#Broadcast message from root@iZwz97tbgo9lkabnat2lo8Z (Wed Jun 20 19:43:55 2018):hello, world!I will show you some code.</code></pre></li></ol><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><ol><li><p><strong>alias</strong></p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# alias ll='ls -l'[root@iZwz97tbgo9lkabnat2lo8Z ~]# alias frm='rm -rf'[root@iZwz97tbgo9lkabnat2lo8Z ~]# ll...drwxr-xr-x  2 root       root   4096 Jun 20 12:52 abc...[root@iZwz97tbgo9lkabnat2lo8Z ~]# frm abc</code></pre></li><li><p><strong>unalias</strong></p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# unalias frm[root@iZwz97tbgo9lkabnat2lo8Z ~]# frm sohu.html-bash: frm: command not found</code></pre></li></ol><h4 id="其他程序"><a href="#其他程序" class="headerlink" title="其他程序"></a>其他程序</h4><ol><li><p>时间和日期 - <strong>date</strong> / <strong>cal</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# dateWed Jun 20 12:53:19 CST 2018[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal      June 2018Su Mo Tu We Th Fr Sa                1  2 3  4  5  6  7  8  910 11 12 13 14 15 1617 18 19 20 21 22 2324 25 26 27 28 29 30[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal 5 2017      May 2017Su Mo Tu We Th Fr Sa    1  2  3  4  5  6 7  8  9 10 11 12 1314 15 16 17 18 19 2021 22 23 24 25 26 2728 29 30 31</code></pre></li><li><p>录制操作脚本 - <strong>script</strong>。</p></li><li><p>给用户发送消息 - <strong>mesg</strong> / <strong>write</strong> / <strong>wall</strong> / <strong>mail</strong>。</p></li></ol><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><h4 id="文件和路径"><a href="#文件和路径" class="headerlink" title="文件和路径"></a>文件和路径</h4><ol><li>命名规则：文件名的最大长度与文件系统类型有关，一般情况下，文件名不应该超过255个字符，虽然绝大多数的字符都可以用于文件名，但是最好使用英文大小写字母、数字、下划线、点这样的符号。文件名中虽然可以使用空格，但应该尽可能避免使用空格，否则在输入文件名时需要用将文件名放在双引号中或者通过<code>\</code>对空格进行转义。</li><li>扩展名：在Linux系统下文件的扩展名是可选的，但是使用扩展名有助于对文件内容的理解。有些应用程序要通过扩展名来识别文件，但是更多的应用程序并不依赖文件的扩展名，就像<code>file</code>命令在识别文件时并不是依据扩展名来判定文件的类型。</li><li>隐藏文件：以点开头的文件在Linux系统中是隐藏文件（不可见文件）。</li></ol><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ol><li>/bin - 基本命令的二进制文件。</li><li>/boot - 引导加载程序的静态文件。</li><li>/dev - 设备文件。</li><li><strong>/etc</strong> - 配置文件。</li><li>/home - 普通用户主目录的父目录。</li><li>/lib - 共享库文件。</li><li>/lib64 - 共享64位库文件。</li><li>/lost+found - 存放未链接文件。</li><li>/media - 自动识别设备的挂载目录。</li><li>/mnt - 临时挂载文件系统的挂载点。</li><li>/opt - 可选插件软件包安装位置。</li><li>/proc -  内核和进程信息。</li><li><strong>/root</strong> - 超级管理员用户主目录。</li><li>/run - 存放系统运行时需要的东西。</li><li>/sbin - 超级用户的二进制文件。</li><li>/sys - 设备的伪文件系统。</li><li>/tmp - 临时文件夹。</li><li><strong>/usr</strong> - 用户应用目录。</li><li>/var - 变量数据目录。</li></ol><h4 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h4><ol><li><p><strong>chmod</strong> - 改变文件模式比特。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l...-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html...[root@iZwz97tbgo9lkabnat2lo8Z ~]# chmod g+w,o+w sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l...-rw-rw-rw-  1 root       root 211878 Jun 19 16:06 sohu.html...[root@iZwz97tbgo9lkabnat2lo8Z ~]# chmod 644 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l...-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html...</code></pre><blockquote><p>说明：通过上面的例子可以看出，用<code>chmod</code>改变文件模式比特有两种方式：一种是字符设定法，另一种是数字设定法。除了<code>chmod</code>之外，可以通过<code>umask</code>来设定哪些权限将在新文件的默认权限中被删除。</p></blockquote><p>长格式查看目录或文件时显示结果及其对应权限的数值如下表所示。</p><p><img src="./res/file-mode.png" alt=""></p></li><li><p><strong>chown</strong> - 改变文件所有者。</p><pre class=" language-Shell"><code class="language-Shell"> [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l ... -rw-r--r--  1 root root     54 Jun 20 10:06 readme.txt ... [root@iZwz97tbgo9lkabnat2lo8Z ~]# chown hellokitty readme.txt [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l ... -rw-r--r--  1 hellokitty root     54 Jun 20 10:06 readme.txt ...</code></pre></li></ol><h4 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h4><ol><li><p>列出文件系统的磁盘使用状况 - <strong>df</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# df -hFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        40G  5.0G   33G  14% /devtmpfs        486M     0  486M   0% /devtmpfs           497M     0  497M   0% /dev/shmtmpfs           497M  356K  496M   1% /runtmpfs           497M     0  497M   0% /sys/fs/cgrouptmpfs           100M     0  100M   0% /run/user/0</code></pre></li><li><p>磁盘分区表操作 - <strong>fdisk</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# fdisk -lDisk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000a42f4   Device Boot      Start         End      Blocks   Id  System/dev/vda1   *        2048    83884031    41940992   83  LinuxDisk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes</code></pre></li><li><p>格式化文件系统 - <strong>mkfs</strong>。</p></li><li><p>文件系统检查 - <strong>fsck</strong>。</p></li><li><p>挂载/卸载 - <strong>mount</strong> / <strong>umount</strong>。</p></li></ol><h3 id="编辑器-vim"><a href="#编辑器-vim" class="headerlink" title="编辑器 - vim"></a>编辑器 - vim</h3><ol><li><p>启动vim。可以通过<code>vi</code>或<code>vim</code>命令来启动vim，启动时可以指定文件名来打开一个文件，如果没有指定文件名，也可以在保存的时候指定文件名。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# vim guess.py</code></pre></li><li><p>命令模式、编辑模式和末行模式：启动vim进入的是命令模式（也称为Normal模式），在命令模式下输入英文字母<code>i</code>会进入编辑模式（Insert模式），屏幕下方出现<code>-- INSERT --</code>提示；在编辑模式下按下<code>Esc</code>会回到命令模式，此时如果输入英文<code>:</code>会进入末行模式，在末行模式下输入<code>q!</code>可以在不保存当前工作的情况下强行退出vim；在命令模式下输入<code>v</code>会进入可视模式（Visual模式），可以用光标选择一个区域再完成对应的操作。</p></li><li><p>保存和退出vim：在命令模式下输入<code>:</code> 进入末行模式，输入<code>wq</code>可以实现保存退出；如果想放弃编辑的内容输入<code>q!</code>强行退出，这一点刚才已经提到过了；在命令模式下也可以直接输入<code>ZZ</code>实现保存退出。如果只想保存文件不退出，那么可以在末行模式下输入<code>w</code>；可以在<code>w</code>后面输入空格再指定要保存的文件名。</p></li><li><p>光标操作。</p><ul><li>在命令模式下可以通过<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>来控制光标向左、下、上、右的方向移动，可以在字母前输入数字来表示移动的距离，例如：<code>10h</code>表示向左移动10个字符。</li><li>在命令模式下可以通过<code>Ctrl+y</code>和<code>Ctrl+e</code>来实现向上、向下滚动一行文本的操作，可以通过<code>Ctrl+f</code>和<code>Ctrl+b</code>来实现向前和向后翻页的操作。</li><li>在命令模式下可以通过输入英文字母<code>G</code>将光标移到文件的末尾，可以通过<code>gg</code>将光标移到文件的开始，也可以通过在<code>G</code>前输入数字来将光标移动到指定的行。</li></ul></li><li><p>文本操作。</p><ul><li>删除：在命令模式下可以用<code>dd</code>来删除整行；可以在<code>dd</code>前加数字来指定删除的行数；可以用<code>d$</code>来实现删除从光标处删到行尾的操作，也可以通过<code>d0</code>来实现从光标处删到行首的操作；如果想删除一个单词，可以使用<code>dw</code>；如果要删除全文，可以在输入<code>:%d</code>（其中<code>:</code>用来从命令模式进入末行模式）。</li><li>复制和粘贴：在命令模式下可以用<code>yy</code>来复制整行；可以在<code>yy</code>前加数字来指定复制的行数；可以通过<code>p</code>将复制的内容粘贴到光标所在的地方。</li><li>撤销和恢复：在命令模式下输入<code>u</code>可以撤销之前的操作；通过<code>Ctrl+r</code>可以恢复被撤销的操作。</li><li>对内容进行排序：在命令模式下输入<code>%!sort</code>。</li></ul></li><li><p>查找和替换。</p><ul><li>查找操作需要输入<code>/</code>进入末行模式并提供正则表达式来匹配与之对应的内容，例如：<code>/doc.*\.</code>，输入<code>n</code>来向前搜索，也可以输入<code>N</code>来向后搜索。</li><li>替换操作需要输入<code>:</code>进入末行模式并指定搜索的范围、正则表达式以及替换后的内容和匹配选项，例如：<code>:1,$s/doc.*/hello/gice</code>，其中：<ul><li><code>g</code> - global：全局匹配。</li><li><code>i</code> - ignore case：忽略大小写匹配。</li><li><code>c</code> - confirm：替换时需要确认。</li><li><code>e</code> - error：忽略错误。</li></ul></li></ul></li><li><p>参数设定：在输入<code>:</code>进入末行模式后可以对vim进行设定。</p><ul><li><p>设置Tab键的空格数：<code>set ts=4</code></p></li><li><p>设置显示/不显示行号：<code>set nu</code> / <code>set nonu</code></p></li><li><p>设置启用/关闭高亮语法：<code>syntax on</code> / <code>syntax off</code></p></li><li><p>设置显示标尺（光标所在的行和列）： <code>set ruler</code></p></li><li><p>设置启用/关闭搜索结果高亮：<code>set hls</code> / <code>set nohls</code></p><blockquote><p>说明：如果希望上面的这些设定在每次启动vim时都能生效，需要将这些设定写到用户主目录下的.vimrc文件中。</p></blockquote></li></ul></li><li><p>高级技巧</p><ul><li><p>比较多个文件。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# vim -d foo.txt bar.txt</code></pre><p><img src="./res/vim-diff.png" alt=""></p></li><li><p>打开多个文件。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# vim foo.txt bar.txt hello.txt</code></pre><p>启动vim后只有一个窗口显示的是foo.txt，可以在末行模式中输入<code>ls</code>查看到打开的三个文件，也可以在末行模式中输入<code>b &lt;num&gt;</code>来显示另一个文件，例如可以用<code>:b 2</code>将bar.txt显示出来，可以用<code>:b 3</code>将hello.txt显示出来。</p></li><li><p>拆分和切换窗口。</p><p>可以在末行模式中输入<code>sp</code>或<code>vs</code>来实现对窗口的水平或垂直拆分，这样我们就可以同时打开多个编辑窗口，通过按两次<code>Ctrl+w</code>就可以实现编辑窗口的切换，在一个窗口中执行退出操作只会关闭对应的窗口，其他的窗口继续保留。</p><p><img src="./res/vim-multi-window.png" alt=""></p></li><li><p>映射快捷键：在vim下可以将一些常用操作映射为快捷键来提升工作效率。</p><ul><li><p>例子1：在命令模式下输入<code>F4</code>执行从第一行开始删除10000行代码的操作。</p><p><code>:map &lt;F4&gt; gg10000dd</code>。</p><p>例子2：在编辑模式下输入<code>__main</code>直接补全为<code>if __name__ == &#39;__main__&#39;:</code>。</p><p><code>:inoremap __main if __name__ == &#39;__main__&#39;:</code></p></li></ul><blockquote><p>说明：上面例子2的<code>inoremap</code>中的<code>i</code>表示映射的键在编辑模式使用， <code>nore</code>表示不要递归，这一点非常重要，否则如果键对应的内容中又出现键本身，就会引发递归（相当于进入了死循环）。如果希望映射的快捷键每次启动vim时都能生效，需要将映射写到用户主目录下的.vimrc文件中。</p></blockquote></li><li><p>录制宏。</p><ul><li><p>在命令模式下输入<code>qa</code>开始录制宏（其中<code>a</code>是寄存器的名字，也可以是其他英文字母或0-9的数字）。</p></li><li><p>执行你的操作（光标操作、编辑操作等），这些操作都会被录制下来。</p></li><li><p>如果录制的操作已经完成了，按<code>q</code>结束录制。</p></li><li><p>通过<code>@a</code>（<code>a</code>是刚才使用的寄存器的名字）播放宏，如果要多次执行宏可以在前面加数字，例如<code>100@a</code>表示将宏播放100次。</p></li><li><p>可以试一试下面的例子来体验录制宏的操作，该例子来源于<a href="https://harttle.land/tags.html#Vim" target="_blank" rel="noopener">Harttle Land网站</a>，该网站上提供了很多关于vim的使用技巧，有兴趣的可以去了解一下。</p><p><img src="./res/vim-macro.png" alt=""></p></li></ul></li></ul></li></ol><h3 id="软件安装和配置"><a href="#软件安装和配置" class="headerlink" title="软件安装和配置"></a>软件安装和配置</h3><h4 id="使用包管理工具"><a href="#使用包管理工具" class="headerlink" title="使用包管理工具"></a>使用包管理工具</h4><ol><li><strong>yum</strong> - Yellowdog Updater Modified。<ul><li><code>yum search</code>：搜索软件包，例如<code>yum search nginx</code>。</li><li><code>yum list installed</code>：列出已经安装的软件包，例如<code>yum list installed | grep zlib</code>。</li><li><code>yum install</code>：安装软件包，例如<code>yum install nginx</code>。</li><li><code>yum remove</code>：删除软件包，例如<code>yum remove nginx</code>。</li><li><code>yum update</code>：更新软件包，例如<code>yum update</code>可以更新所有软件包，而<code>yum update tar</code>只会更新tar。</li><li><code>yum check-update</code>：检查有哪些可以更新的软件包。</li><li><code>yum info</code>：显示软件包的相关信息，例如<code>yum info nginx</code>。</li></ul></li><li><strong>rpm</strong> - Redhat Package Manager。<ul><li>安装软件包：<code>rpm -ivh &lt;packagename&gt;.rpm</code>。</li><li>移除软件包：<code>rpm -e &lt;packagename&gt;</code>。</li><li>查询软件包：<code>rpm -qa</code>，例如可以用<code>rpm -qa | grep mysql</code>来检查是否安装了MySQL相关的软件包。</li></ul></li></ol><p>下面以Nginx为例，演示如何使用yum安装软件。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum -y install nginx...Installed:  nginx.x86_64 1:1.12.2-2.el7Dependency Installed:  nginx-all-modules.noarch 1:1.12.2-2.el7  nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7  nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7  nginx-mod-http-perl.x86_64 1:1.12.2-2.el7  nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7  nginx-mod-mail.x86_64 1:1.12.2-2.el7  nginx-mod-stream.x86_64 1:1.12.2-2.el7Complete![root@iZwz97tbgo9lkabnat2lo8Z ~]# yum info nginxLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfileInstalled PackagesName        : nginxArch        : x86_64Epoch       : 1Version     : 1.12.2Release     : 2.el7Size        : 1.5 MRepo        : installedFrom repo   : epelSummary     : A high performance web server and reverse proxy serverURL         : http://nginx.org/License     : BSDDescription : Nginx is a web server and a reverse proxy server for HTTP, SMTP, POP3 and            : IMAP protocols, with a strong focus on high concurrency, performance and low            : memory usage.[root@iZwz97tbgo9lkabnat2lo8Z ~]# nginx -vnginx version: nginx/1.12.2</code></pre><p>移除Nginx。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# nginx -s stop[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum -y remove nginx</code></pre><p>下面以MySQL为例，演示如何使用rpm安装软件。要安装MySQL需要先到<a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL官方网站</a>下载对应的<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">RPM文件</a>，当然要选择和你使用的Linux系统对应的版本。MySQL现在是Oracle公司旗下的产品，在MySQL被收购后，MySQL的作者重新制作了一个MySQL的分支MariaDB，可以通过yum进行安装。如果要安装MySQL需要先通过yum删除<code>mariadb-libs</code>这个可能会跟MySQL底层库冲突的库，然后还需要安装一个名为<code>libaio</code>的依赖库。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z mysql]# lsmysql-community-client-5.7.22-1.el7.x86_64.rpmmysql-community-common-5.7.22-1.el7.x86_64.rpmmysql-community-libs-5.7.22-1.el7.x86_64.rpmmysql-community-server-5.7.22-1.el7.x86_64.rpm[root@iZwz97tbgo9lkabnat2lo8Z mysql]# yum -y remove mariadb-libs[root@iZwz97tbgo9lkabnat2lo8Z mysql]# yum -y install libaio[root@iZwz97tbgo9lkabnat2lo8Z mysql]# ls | xargs rpm -ivhwarning: mysql-community-client-5.7.22-1.el7.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 5072e1f5: NOKEYPreparing...                          ################################# [100%]...</code></pre><blockquote><p>说明：由于MySQL和<a href="https://mariadb.org/" target="_blank" rel="noopener">MariaDB</a>的底层依赖库是有冲突的，所以上面我们首先用<code>yum</code>移除了名为mariadb-libs的依赖库并安装了名为libaio的依赖库。由于我们将安装MySQL所需的rpm文件放在一个独立的目录中，所以可以通过<code>ls</code>命令查看到安装文件并用<code>xargs</code>将<code>ls</code>的输出作为参数交给<code>rpm -ivh</code>来进行安装。关于MySQL和MariaDB之间的关系，可以阅读<a href="https://zh.wikipedia.org/wiki/MariaDB" target="_blank" rel="noopener">维基百科</a>上关于MariaDB的介绍。</p></blockquote><p>移除安装的MySQL。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# rpm -qa | grep mysql | xargs rpm -e</code></pre><h4 id="下载解压配置环境变量"><a href="#下载解压配置环境变量" class="headerlink" title="下载解压配置环境变量"></a>下载解压配置环境变量</h4><p>下面以安装MongoDB为例，演示这类软件应该如何安装。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz--2018-06-21 18:32:53--  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgzResolving fastdl.mongodb.org (fastdl.mongodb.org)... 52.85.83.16, 52.85.83.228, 52.85.83.186, ...Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|52.85.83.16|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 100564462 (96M) [application/x-gzip]Saving to: ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’100%[==================================================>] 100,564,462  630KB/s   in 2m 9s2018-06-21 18:35:04 (760 KB/s) - ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ saved [100564462/100564462][root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip mongodb-linux-x86_64-rhel70-3.6.5.tgz[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf mongodb-linux-x86_64-rhel70-3.6.5.tarmongodb-linux-x86_64-rhel70-3.6.5/READMEmongodb-linux-x86_64-rhel70-3.6.5/THIRD-PARTY-NOTICESmongodb-linux-x86_64-rhel70-3.6.5/MPL-2mongodb-linux-x86_64-rhel70-3.6.5/GNU-AGPL-3.0mongodb-linux-x86_64-rhel70-3.6.5/bin/mongodumpmongodb-linux-x86_64-rhel70-3.6.5/bin/mongorestoremongodb-linux-x86_64-rhel70-3.6.5/bin/mongoexportmongodb-linux-x86_64-rhel70-3.6.5/bin/mongoimportmongodb-linux-x86_64-rhel70-3.6.5/bin/mongostatmongodb-linux-x86_64-rhel70-3.6.5/bin/mongotopmongodb-linux-x86_64-rhel70-3.6.5/bin/bsondumpmongodb-linux-x86_64-rhel70-3.6.5/bin/mongofilesmongodb-linux-x86_64-rhel70-3.6.5/bin/mongoreplaymongodb-linux-x86_64-rhel70-3.6.5/bin/mongoperfmongodb-linux-x86_64-rhel70-3.6.5/bin/mongodmongodb-linux-x86_64-rhel70-3.6.5/bin/mongosmongodb-linux-x86_64-rhel70-3.6.5/bin/mongomongodb-linux-x86_64-rhel70-3.6.5/bin/install_compass[root@iZwz97tbgo9lkabnat2lo8Z ~]# vim .bash_profile...PATH=$PATH:$HOME/bin:$HOME/mongodb-linux-x86_64-rhel70-3.6.5/binexport PATH...[root@iZwz97tbgo9lkabnat2lo8Z ~]# source .bash_profile[root@iZwz97tbgo9lkabnat2lo8Z ~]# mongod --versiondb version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment:    distmod: rhel70    distarch: x86_64    target_arch: x86_64[root@iZwz97tbgo9lkabnat2lo8Z ~]# mongo --versionMongoDB shell version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment:    distmod: rhel70    distarch: x86_64    target_arch: x86_64</code></pre><blockquote><p>说明：当然也可以通过yum来安装MongoDB，具体可以参照<a href="https://docs.mongodb.com/master/administration/install-on-linux/" target="_blank" rel="noopener">官方网站</a>上给出的说明。</p></blockquote><h4 id="源代码构建安装"><a href="#源代码构建安装" class="headerlink" title="源代码构建安装"></a>源代码构建安装</h4><ol><li><p>安装Python 3.6。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum install gcc[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip Python-3.6.5.tgz[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf Python-3.6.5.tar[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd Python-3.6.5[root@iZwz97tbgo9lkabnat2lo8Z ~]# ./configure --prefix=/usr/local/python36 --enable-optimizations[root@iZwz97tbgo9lkabnat2lo8Z ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel[root@iZwz97tbgo9lkabnat2lo8Z ~]# make && make install... 配置环境变量 ...[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3[root@iZwz97tbgo9lkabnat2lo8Z ~]# python3 --versionPython 3.6.5[root@iZwz97tbgo9lkabnat2lo8Z ~]# python3 -m pip install -U pip[root@iZwz97tbgo9lkabnat2lo8Z ~]# pip3 --version</code></pre></li><li><p>安装Redis-3.2.12。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-3.2.12.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-3.2.12.tar.gz[root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-3.2.12.tar[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd redis-3.2.12[root@iZwz97tbgo9lkabnat2lo8Z ~]# make && make install[root@iZwz97tbgo9lkabnat2lo8Z ~]# redis-server --versionRedis server v=3.2.12 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=5bc5cd3c03d6ceb6[root@iZwz97tbgo9lkabnat2lo8Z ~]# redis-cli --versionredis-cli 3.2.12</code></pre></li></ol><h3 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h3><ol><li><p>启动服务。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl start firewalld</code></pre></li><li><p>终止服务。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl stop firewalld</code></pre></li><li><p>重启服务。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl restart firewalld</code></pre></li><li><p>查看服务。</p><pre class=" language-Shell"><code class="language-Shell"> [root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl status firewalld</code></pre></li><li><p>设置是否开机自启。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl enable firewalldCreated symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.Created symlink from /etc/systemd/system/multi-user.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.[root@iZwz97tbgo9lkabnat2lo8Z ~]# systemctl disable firewalldRemoved symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</code></pre></li></ol><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ol><li><p><strong>crontab</strong>命令。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# crontab -e* * * * * echo "hello, world!" >> /root/hello.txt59 23 * * * rm -f /root/*.log</code></pre><blockquote><p>说明：输入<code>crontab -e</code>命令会打开vim来编辑Cron表达式并指定触发的任务，上面我们定制了两个计划任务，一个是每分钟向/root目录下的hello.txt中追加输出<code>hello, world!</code>；另一个是每天23时59分执行删除/root目录下以log为后缀名的文件。如果不知道Cron表达式如何书写，可以参照/etc/crontab文件中的提示（下面会讲到）或者用谷歌或百度搜索一下，也可以使用Cron表达式在线生成器来生成Cron表达式。</p></blockquote></li><li><p>crontab相关文件。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# cd /etc[root@iZwz97tbgo9lkabnat2lo8Z etc]# ls -l | grep cron-rw-------.  1 root root      541 Aug  3  2017 anacrontabdrwxr-xr-x.  2 root root     4096 Mar 27 11:56 cron.ddrwxr-xr-x.  2 root root     4096 Mar 27 11:51 cron.daily-rw-------.  1 root root        0 Aug  3  2017 cron.denydrwxr-xr-x.  2 root root     4096 Mar 27 11:50 cron.hourlydrwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.monthly-rw-r--r--   1 root root      493 Jun 23 15:09 crontabdrwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.weekly[root@iZwz97tbgo9lkabnat2lo8Z etc]# vim crontab  1 SHELL=/bin/bash  2 PATH=/sbin:/bin:/usr/sbin:/usr/bin  3 MAILTO=root  4  5 # For details see man 4 crontabs  6  7 # Example of job definition:  8 # .---------------- minute (0 - 59)  9 # |  .------------- hour (0 - 23) 10 # |  |  .---------- day of month (1 - 31) 11 # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ... 12 # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat 13 # |  |  |  |  | 14 # *  *  *  *  * user-name  command to be executed</code></pre><p>通过修改<code>/etc</code>目录下的crontab文件也能够定制计划任务。</p></li></ol><h3 id="网络访问和管理"><a href="#网络访问和管理" class="headerlink" title="网络访问和管理"></a>网络访问和管理</h3><ol><li><p>通过网络获取资源 - <strong>wget</strong>。</p><ul><li>-b 后台下载模式</li><li>-O 下载到指定的目录</li><li>-r 递归下载</li></ul></li><li><p>显示/操作网络配置（旧） - <strong>ifconfig</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ifconfig eth0eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 172.18.61.250  netmask 255.255.240.0  broadcast 172.18.63.255        ether 00:16:3e:02:b6:46  txqueuelen 1000  (Ethernet)        RX packets 1067841  bytes 1296732947 (1.2 GiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 409912  bytes 43569163 (41.5 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions </code></pre></li><li><p>显示/操作网络配置（新） - <strong>ip</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ip address1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000    link/ether 00:16:3e:02:b6:46 brd ff:ff:ff:ff:ff:ff    inet 172.18.61.250/20 brd 172.18.63.255 scope global eth0       valid_lft forever preferred_lft forever</code></pre></li><li><p>网络可达性检查 - <strong>ping</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ping www.baidu.com -c 3PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=1 ttl=51 time=36.3 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=2 ttl=51 time=36.4 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=3 ttl=51 time=36.4 ms--- www.a.shifen.com ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 2002msrtt min/avg/max/mdev = 36.392/36.406/36.427/0.156 ms</code></pre></li><li><p>查看网络服务和端口 - <strong>netstat</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# netstat -nap | grep nginx</code></pre></li><li><p>安全文件拷贝 - <strong>scp</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# scp root@1.2.3.4:/root/guido.jpg hellokitty@4.3.2.1:/home/hellokitty/pic.jpg</code></pre></li><li><p>安全文件传输 - <strong>sftp</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# sftp root@120.77.222.217root@120.77.222.217's password:Connected to 120.77.222.217.sftp></code></pre><ul><li><p><code>help</code>：显示帮助信息。</p></li><li><p><code>ls</code>/<code>lls</code>：显示远端/本地目录列表。</p></li><li><p><code>cd</code>/<code>lcd</code>：切换远端/本地路径。</p></li><li><p><code>mkdir</code>/<code>lmkdir</code>：创建远端/本地目录。</p></li><li><p><code>pwd</code>/<code>lpwd</code>：显示远端/本地当前工作目录。</p></li><li><p><code>get</code>：下载文件。</p></li><li><p><code>put</code>：上传文件。</p></li><li><p><code>rm</code>：删除远端文件。</p></li><li><p><code>bye</code>/<code>exit</code>/<code>quit</code>：退出sftp。</p></li></ul></li></ol><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ol><li><p><strong>ps</strong> - 查询进程。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ps -efUID        PID  PPID  C STIME TTY          TIME CMDroot         1     0  0 Jun23 ?        00:00:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 21root         2     0  0 Jun23 ?        00:00:00 [kthreadd]...[root@iZwz97tbgo9lkabnat2lo8Z ~]# ps -ef | grep mysqldroot      4943  4581  0 22:45 pts/0    00:00:00 grep --color=auto mysqldmysql    25257     1  0 Jun25 ?        00:00:39 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</code></pre></li><li><p><strong>kill</strong> - 终止进程。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# kill 1234[root@iZwz97tbgo9lkabnat2lo8Z ~]# kill -9 1234</code></pre><p>例子：用一条命令强制终止正在运行的Redis进程。</p><pre class=" language-Shell"><code class="language-Shell">ps -ef | grep redis | grep -v grep | awk '{print $2}' | xargs kill</code></pre></li><li><p>将进程置于后台运行。</p><ul><li><code>Ctrl+Z</code></li><li><code>&amp;</code></li></ul><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# mongod &[root@iZwz97tbgo9lkabnat2lo8Z ~]# redis-server...^Z[4]+  Stopped                 redis-server</code></pre></li><li><p><strong>jobs</strong> - 查询后台进程。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# jobs[2]   Running                 mongod &[3]-  Stopped                 cat[4]+  Stopped                 redis-server</code></pre></li><li><p><strong>bg</strong> - 让进程在后台继续运行。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# bg %4[4]+ redis-server &[root@iZwz97tbgo9lkabnat2lo8Z ~]# jobs[2]   Running                 mongod &[3]+  Stopped                 cat[4]-  Running                 redis-server &</code></pre></li><li><p><strong>fg</strong> - 将后台进程置于前台。</p><pre class=" language-Shell"><code class="language-Shell"> [root@iZwz97tbgo9lkabnat2lo8Z ~]# fg %4 redis-server ^C5554:signal-handler (1530025281) Received SIGINT scheduling shutdown... 5554:M 26 Jun 23:01:21.413 # User requested shutdown... 5554:M 26 Jun 23:01:21.413 * Saving the final RDB snapshot before exiting. 5554:M 26 Jun 23:01:21.415 * DB saved on disk 5554:M 26 Jun 23:01:21.415 # Redis is now ready to exit, bye bye...</code></pre><blockquote><p>说明：置于前台的进程可以使用<code>Ctrl+C</code>来终止它。</p></blockquote></li><li><p><strong>top</strong> - 进程监控。</p><pre class=" language-Shell"><code class="language-Shell"> [root@iZwz97tbgo9lkabnat2lo8Z ~]# top top - 23:04:23 up 3 days, 14:10,  1 user,  load average: 0.00, 0.01, 0.05 Tasks:  65 total,   1 running,  64 sleeping,   0 stopped,   0 zombie %Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st KiB Mem :  1016168 total,   191060 free,   324700 used,   500408 buff/cache KiB Swap:        0 total,        0 free,        0 used.   530944 avail Mem ...</code></pre></li></ol><h3 id="系统性能"><a href="#系统性能" class="headerlink" title="系统性能"></a>系统性能</h3><ol><li><p>查看系统活动信息 - <strong>sar</strong>。</p></li><li><p>查看内存使用情况 - <strong>free</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# free              total        used        free      shared  buff/cache   availableMem:        1016168      323924      190452         356      501792      531800Swap:             0           0           0</code></pre></li><li><p>查看进程使用内存状况 - <strong>pmap</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ps  PID TTY          TIME CMD 4581 pts/0    00:00:00 bash 5664 pts/0    00:00:00 ps[root@iZwz97tbgo9lkabnat2lo8Z ~]# pmap 45814581:   -bash0000000000400000    884K r-x-- bash00000000006dc000      4K r---- bash00000000006dd000     36K rw--- bash00000000006e6000     24K rw---   [ anon ]0000000001de0000    400K rw---   [ anon ]00007f82fe805000     48K r-x-- libnss_files-2.17.so00007f82fe811000   2044K ----- libnss_files-2.17.so...</code></pre></li><li><p>报告设备CPU和I/O统计信息 - <strong>iostat</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# iostatLinux 3.10.0-693.11.1.el7.x86_64 (iZwz97tbgo9lkabnat2lo8Z)      06/26/2018      _x86_64_       (1 CPU)avg-cpu:  %user   %nice %system %iowait  %steal   %idle           0.79    0.00    0.20    0.04    0.00   98.97Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtnvda               0.85         6.78        21.32    2106565    6623024vdb               0.00         0.01         0.00       2088          0</code></pre></li></ol><h3 id="Shell和Shell编程"><a href="#Shell和Shell编程" class="headerlink" title="Shell和Shell编程"></a>Shell和Shell编程</h3><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><ol><li>HOME</li><li>SHELL</li><li>HISTSIZE</li><li>RANDOM</li><li>PATH</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim编辑器的使用</title>
      <link href="/2018/12/23/vim-bian-ji-qi-zhi-shen/"/>
      <url>/2018/12/23/vim-bian-ji-qi-zhi-shen/</url>
      
        <content type="html"><![CDATA[<h1 id="vim编辑器之神"><a href="#vim编辑器之神" class="headerlink" title="vim编辑器之神"></a>vim编辑器之神</h1><h3 id="配置vimrc配置"><a href="#配置vimrc配置" class="headerlink" title="配置vimrc配置"></a>配置vimrc配置</h3><p>在shell中可以通过 <code>vim ~/.vimrc</code> 或者 <code>vim /etc/vimrc</code> 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：</p><p><img src="/images/vim1.png" alt=""> </p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="1-模式切换"><a href="#1-模式切换" class="headerlink" title="1.模式切换"></a>1.模式切换</h4><p>我们可以将vim分为命令模式、编辑模式和末行模式三种<br><strong>命令模式：</strong>进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区  (最末什么都没有)</p><p><strong>末行模式：</strong>在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作  (最后有一个冒号)</p><p><strong>编辑模式：</strong>在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–)  </p><h4 id="2-保存和退出"><a href="#2-保存和退出" class="headerlink" title="2.保存和退出"></a>2.保存和退出</h4><p>在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面<br><strong>w</strong> – 只保存(类似快捷键ctr+s)<br><strong>q</strong> – 退出（在编辑区的内容全部都保存的情况下才有效）<br><strong>wq</strong> – 保存并退出<br><strong>q!</strong>  – 强制退出（不保存修改信息）    </p><h4 id="3-光标操作"><a href="#3-光标操作" class="headerlink" title="3.光标操作"></a>3.光标操作</h4><p>以下光标操作都是在命令模式下输入的<br><strong>^(shift+6)</strong>  – 移动到行首<br><strong>$(shift+4)</strong>  – 移动到行尾<br><strong>G(shift+g)</strong>    – 移动到文件末尾<br><strong>行号G</strong>            – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行<br><strong>gg</strong>                – 移动到文件开头  </p><h4 id="4-文本操作"><a href="#4-文本操作" class="headerlink" title="4.文本操作"></a>4.文本操作</h4><p>以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入<br><strong>dd</strong>            – 删除光标所在的行<br><strong>数字dd</strong>        – 从光标所在行开始往后面开始删，删除指定数量行内容<br><strong>:%d</strong>        – 删除所有     </p><p><strong>yy</strong>         – 复制光标所在的行<br><strong>数字yy</strong>        – 从光标所在行开始复制指定行数的内容<br><strong>p</strong>            – 将复制的内容粘贴到光标所在的位置<br><strong>u</strong>            – 撤销<br><strong>ctr+r</strong>    – 反撤销    </p><p><strong>:%!sort</strong>  – 对内容排序  </p><p><strong>:/查找对象[/gice]</strong>    – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找  </p><p><strong>:1,$s/被替换对象/替换内容[/gice]</strong>    – 将正则表达式匹配到的内容替换成指定内容   </p><pre><code>-    g: 全局匹配  -     i: 忽略大小写 -   c: 替换时需要提示  -   e: 忽略错误  </code></pre>]]></content>
      
      
      <categories>
          
          <category> vim编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog_setting介绍</title>
      <link href="/2018/12/22/blog-setting/"/>
      <url>/2018/12/22/blog-setting/</url>
      
        <content type="html"><![CDATA[<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a>设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>每天动态切换<code>Banner</code>图片</li><li>瀑布流式的博客文章列表(文章无特色图片时会有<code>24</code>张漂亮的图片代替)</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持<code>MathJax</code></li><li><code>TOC</code>目录</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>和<a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a>评论模块（推荐使用<code>Gitalk</code>）</li><li>集成了谷歌分析(<code>Google Analytics</code>)</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>博客了，Hexo 和<a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a>来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">这里</a> 下载：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的<code>_config.yml</code>的<code>theme</code>的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml文件的其它修改建议"><a href="#config-yml文件的其它修改建议" class="headerlink" title="_config.yml文件的其它修改建议:"></a><code>_config.yml</code>文件的其它修改建议:</h4><ul><li>请修改<code>_config.yml</code>的<code>url</code>的值为你的网站主<code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个<code>per_page</code>的分页条数值为<code>6</code>的倍数，如：<code>12</code>、<code>18</code>等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改<code>language</code>的值为<code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code>页是用来展示所有分类的页面，如果在你的博客<code>source</code>目录下还没有<code>categories/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件<code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code>页是用来展示所有标签的页面，如果在你的博客<code>source</code>目录下还没有<code>tags/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件<code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code>页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客<code>source</code>目录下还没有<code>about/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件<code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code>页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客<code>source</code>目录下还没有<code>friends/index.md</code>文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件<code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客<code>source</code>目录下新建<code>_data</code>目录，在<code>_data</code>目录中新建<code>friends.json</code>文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"lorry——Python"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"Python_遇见那天的雨真大"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.jianshu.com/u/cf22212f3cdf"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去观摩"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了<a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a>的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下<code>_config.yml</code>文件中<code>highlight.enable</code>的值为<code>false</code>，并新增<code>prism</code>插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了<a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a>的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h3 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于<code>SEO</code>，且<code>gitment</code>评论对中文链接也不支持。我们可以用<a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a>插件也可以生成非中文的链接。</p></blockquote><h3 id="添加RSS订阅支持（可选的）"><a href="#添加RSS订阅支持（可选的）" class="headerlink" title="添加RSS订阅支持（可选的）"></a>添加RSS订阅支持（可选的）</h3><p>本主题中还使用到了<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a>的 Hexo 插件来做<code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的<code>_config.yml</code>文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code>重新生成博客文件，然后在<code>public</code>文件夹中即可看到<code>atom.xml</code>文件，说明你已经安装成功了。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题文件的<code>/layout/_partial/social-link.ejs</code>文件中，你可以修改或添加你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a>中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的<code>Font Awesome</code>版本为<code>4.5.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的<code>source/medias/reward</code>文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h2 id="文档示例"><a href="#文档示例" class="headerlink" title="文档示例"></a>文档示例</h2><p>以下为文章<code>Front-matter</code>的示例，所有内容均为<strong>非必填</strong>的。但是，仍然建议至少填写<code>title</code>的值，当然最好都填写上这些文章信息。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg <span class="token comment" spellcheck="true"># 或者:http://xxx.com/xxx.jpg</span><span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 如果top值为true，则会是首页推荐文章</span><span class="token comment" spellcheck="true"># 如果要对文章设置阅读验证密码的话，就可以在设置password的值，该值必须是用SHA256加密后的密码，防止被他人识破</span><span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token comment" spellcheck="true"># 本文章是否开启mathjax，且需要在主题的_config.yml文件中也需要开启才行</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><blockquote><p><strong>注意</strong>:</p><ol><li>如果<code>img</code>属性不填写的话，文章特色图会根据文章标题的<code>hashcode</code>的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code>的值尽量保证每篇文章是唯一的，因为本主题中<code>Gitalk</code>和<code>Gitment</code>识别<code>id</code>是通过<code>date</code>的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在Front-matter中设置采用了SHA256加密的password的值，还需要在主题的<code>_config.yml</code>中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li></ol></blockquote><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的<code>_config.yml</code>中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>首页的励志名言</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC目录</li><li>文章打赏信息</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code>和<code>disqus</code>评论配置</li><li>谷歌分析(<code>Google Analytics</code>)</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的<code>hashcode</code>值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的<code>_config.yml</code>中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的<code>/source/css/matery.css</code>文件中，搜索<code>.bg-color</code>来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 和背景颜色相同的文字颜色，目前仅在首页一个地方使用到，你也可以将此样式应用到其他地方. */</span><span class="token selector"><span class="token class">.text-color</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0f9d58</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> blog搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
